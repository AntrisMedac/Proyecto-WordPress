/*
    Sesiones y cookies - Integrado con WooCommerce
                                                    */

// Inicia la sesión al abrir la página y tiene una duración de 24h
function iniciarSesion() {
    if (!session_id()) {
        session_start([
            'cookie_lifetime' => 86400, // 24 horas
        ]);
    }

    // WooCommerce maneja sus propias sesiones, nos aseguramos de no interferir
    if ( ! WC()->session ) {
        WC()->session = new WC_Session_Handler();
        WC()->session->init();
    }

    // Si el usuario ha solicitado "Recordar mi sesión"
    if (isset($_COOKIE['user_remember_me'])) {
        $user_token = $_COOKIE['user_remember_me'];

        // Verifica el token con el que guardaste el token de usuario en la base de datos
        $user_id = verificarToken($user_token);
        if ($user_id) {
            // Restaura la sesión del usuario
            $_SESSION['user_id'] = $user_id;
            $_SESSION['is_logged_in'] = true;
        }
    }
}
add_action('init', 'iniciarSesion');


// Función para verificar el token
function verificarToken($token) {
    global $wpdb;
    $user = $wpdb->get_row($wpdb->prepare("SELECT * FROM {$wpdb->prefix}users WHERE remember_token = %s", $token));

    if ($user) {
        return $user->ID;
    }
    return false;
}


// Función para gestionar el "Recordar mi sesión" al iniciar sesión
function recordarSesion($user_id) {
    // Genera un token único para recordar la sesión
    $token = bin2hex(random_bytes(32));

    // Guarda este token en la base de datos para este usuario
    global $wpdb;
    $wpdb->update(
        "{$wpdb->prefix}users",
        ['remember_token' => $token],
        ['ID' => $user_id]
    );

    // Establece una cookie con el token
    setcookie('user_remember_me', $token, time() + (86400 * 30), '/', '', true, true); // Expira en 30 días
}


// Función para cerrar sesión y eliminar la cookie de "Recordar mi sesión"
function cerrarSesion() {
    session_destroy();
    setcookie('user_remember_me', '', time() - 3600, '/', '', true, true); // Eliminar la cookie
}
add_action('wp_logout', 'cerrarSesion');


// Se ejecuta al inicio de la página y guarda las preferencias del usuario
function preferenciasUsuario() {
    // Guardar preferencias de idioma
    if (isset($_POST['idioma_preferido'])) {
        setcookie('user_language', $_POST['idioma_preferido'], time() + (86400 * 30), '/', '', true, true);
    }

    // Guardar preferencias de moneda
    if (isset($_POST['moneda_preferida'])) {
        setcookie('user_currency', $_POST['moneda_preferida'], time() + (86400 * 30), '/', '', true, true);
        // Actualiza la moneda en la sesión de WooCommerce
        WC()->session->set('currency', $_POST['moneda_preferida']);
    }

    // Guardar tema de color
    if (isset($_POST['tema_color'])) {
        setcookie('user_theme', $_POST['tema_color'], time() + (86400 * 30), '/', '', true, true);
    }
}
add_action('init', 'preferenciasUsuario');


// Se ejecuta en las páginas de productos de WooCommerce y guarda los últimos 5 productos vistos en una cookie
function productosVistos() {
    if (is_product()) {
        $producto_actual = get_the_ID();
        $productos_vistos = isset($_COOKIE['productos_vistos']) ? json_decode($_COOKIE['productos_vistos'], true) : array();

        if (!in_array($producto_actual, $productos_vistos)) {
            array_unshift($productos_vistos, $producto_actual);
            $productos_vistos = array_slice($productos_vistos, 0, 5); // Mantener solo los últimos 5
        }

        setcookie('productos_vistos', json_encode($productos_vistos), time() + (86400 * 30), '/', '');
    }
}
add_action('wp', 'productosVistos');

/*
    Formulario Personalizado
                                */
// Personalizar formulario de registro para incluir el campo de teléfono
add_action('woocommerce_register_form_start', 'campoNtelefono');
function campoNtelefono() {
    ?>
    <p class="form-row form-row-wide">
        <label for="reg_phone">Teléfono <span class="required">*</span></label>
        <input type="text" class="input-text" name="phone" id="reg_phone" value="<?php if (!empty($_POST['phone'])) echo esc_attr($_POST['phone']); ?>" />
    </p>
    <?php
}


// Validar el campo de teléfono durante el registro
add_action('woocommerce_register_post', 'validarCampoNtelefono', 10, 3);
function validarCampoNtelefono($username, $email, $validation_errors) {
    // Verifica que el teléfono no esté vacío y que tenga exactamente 9 dígitos
    if (empty($_POST['phone']) || !preg_match('/^\d{9}$/', $_POST['phone'])) {
        $validation_errors->add('phone_error', __('Por favor ingresa un teléfono válido (9 dígitos).', 'woocommerce'));
    }    
    return $validation_errors;
}

// Guardar el número de teléfono en la base de datos
add_action('woocommerce_created_customer', 'guardarCampoNtelefono');
function guardarCampoNtelefono($customer_id) {
    if (isset($_POST['phone'])) {
        // Sanear y guardar el teléfono como un número sin caracteres no numéricos
        $phone = sanitize_text_field($_POST['phone']);
        $phone = preg_replace('/\D/', '', $phone); // Elimina cualquier carácter no numérico
        update_user_meta($customer_id, 'phone', $phone);
    }
}

/*
    Autenticación y Gestión de Sesión
                                        */

// Inicio de sesión seguro: Custom login action
function login_custom_action($username, $password) {
    // Verificar las credenciales usando wp_signon(), que maneja el hashing de contraseñas de manera segura
    $user = wp_signon( array(
        'user_login'    => $username,
        'user_password' => $password,
        'remember'      => true
    ), false );

    if (is_wp_error($user)) {
        return false;  // Error de login
    } else {
        return $user;  // Usuario autenticado correctamente
    }
}

// Cierre de sesión: Función personalizada
function logout_custom_action() {
    wp_logout();
    wp_redirect(home_url()); // Redirige a la página principal después de cerrar sesión
    exit;
}

// Redirigir al usuario después de iniciar sesión
add_filter('woocommerce_login_redirect', 'redireccionarDespuesLogin', 10, 2);
function redireccionarDespuesLogin($redirect, $user) {
    return home_url('/mi-cuenta');  // Redirige al usuario a su página de cuenta
}

// Proteger el acceso a la cuenta solo para usuarios registrados
function restringirAccesoMiCuenta() {
    if (is_account_page() && !is_user_logged_in()) {
        wp_redirect(wp_login_url());
        exit;
    }
}
add_action('template_redirect', 'restringirAccesoMiCuenta');

/*
    Seguridad Adicional
                        */

// Añadir un filtro para asegurar que el correo esté validado
add_filter('woocommerce_registration_errors', 'validarCorreoRegistro', 10, 3);
function validarCorreoRegistro($errors, $username, $email) {
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $errors->add('invalid_email', __('El correo electrónico ingresado no es válido.', 'woocommerce'));
    }
    return $errors;
}

// Validación de contraseña segura (al menos 8 caracteres, 1 número, 1 letra)
add_filter('woocommerce_registration_errors', 'validarContraseñaRegistro', 10, 3);
function validarContraseñaRegistro($errors, $username, $email) {
    if (isset($_POST['password_1'])) {
        $password = $_POST['password_1'];
        if (strlen($password) < 8 || !preg_match('/[0-9]/', $password) || !preg_match('/[A-Za-z]/', $password)) {
            $errors->add('password_error', __('La contraseña debe tener al menos 8 caracteres, 1 número y 1 letra.', 'woocommerce'));
        }
    }
    return $errors;
}
